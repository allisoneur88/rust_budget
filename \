use std::{cell::RefCell, rc::Rc};

use uuid::Uuid;

use crate::{
    SuperCategory, app::app_state::AppState, services::super_category_service::SuperCategoryService,
};

pub struct SuperCategoryController {
    pub super_category_service: SuperCategoryService,
    pub app_state: Rc<RefCell<AppState>>,
}

impl SuperCategoryController {
    pub fn new(app_state: Rc<RefCell<AppState>>) -> Self {
        Self {
            super_category_service: SuperCategoryService::new(),
            app_state,
        }
    }

    pub fn get_all(&self) -> Vec<SuperCategory> {
        self.app_state
            .borrow()
            .super_categories
            .list(self.app_state.borrow().current_budget.as_ref().unwrap())
    }

    pub fn get_by_id(&self, id: Uuid) -> Option<SuperCategory> {
        self.app_state
            .borrow()
            .super_categories
            .as_ref()
            .get(self.app_state.borrow().current_budget.as_ref().unwrap(), id)
    }

    pub fn create(&self, name: &str) {
        let super_category = self.super_category_service.make_super_category(
            name,
            self.app_state.borrow().current_budget.as_ref().unwrap(),
        );

        self.app_state
            .borrow_mut()
            .super_categories
            .save(super_category);
    }

    pub fn rename(&self, id: Uuid, new_name: &str) {
        let mut super_category = self.get_by_id(id).unwrap();

        self.super_category_service
            .update_name(&mut super_category, new_name);

        self.app_state
            .borrow_mut()
            .super_categories
            .save(super_category);
    }

    pub fn delete(&self, id: Uuid) {
        let mut super_category = self.get_by_id(id).unwrap();

        self.app_state.borrow_mut().super_categories.delete(id);
    }
}
